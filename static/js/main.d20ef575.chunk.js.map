{"version":3,"sources":["actions/index.js","utils/index.js","reducers/game-reducer.js","reducers/index.js","components/GridSquare.js","components/GridBoard.js","components/NextBlock.js","components/HoldBlock.js","components/ScoreBoard.js","components/HighScore.js","components/Controls.js","components/MessagePopup.js","components/Info.js","App.js","index.js"],"names":["PAUSE","RESUME","MOVE_LEFT","MOVE_RIGHT","ROTATE","ROTATE_PREV","MOVE_DOWN","GAME_OVER","RESTART","HOLD_SHAPE","moveRight","type","moveLeft","rotate","moveDown","pause","resume","restart","gridDefault","array","row","push","col","controlKeys","left","right","down","rotatePrev","holdShape","drop","shapes","randomShape","min","max","length","Math","floor","random","defaultValues","defaultState","grid","shape","rotation","x","y","nextShape","canHoldShape","isRunning","score","speed","gameOver","scoreSaved","lines","level","highScore","getHighScore","nextRotation","prevRotation","canMoveTo","currentShape","gridWidth","gridHeight","proposedX","proposedY","possibleRow","undefined","addBlockToGrid","blockOffGrid","block","newGrid","checkRows","completedRows","indexOf","splice","unshift","Array","fill","points","moveBlockDown","state","moveInc","maybeY","obj","newState","saveHighScore","newScore","calculateLevel","calculateSpeed","linesCleared","serializedState","localStorage","getItem","JSON","parse","err","setItem","stringify","console","log","gameReducer","action","newCwRotation","newCcwRotation","newShape","newNextShape","reducers","combineReducers","game","GridSquare","props","classes","color","className","GridBoard","requestRef","useRef","lastUpdateTimeRef","progressTimeRef","dispatch","useDispatch","useSelector","blockColor","gridSquares","map","rowArray","square","blockX","blockY","k","update","time","current","requestAnimationFrame","deltaTime","useEffect","cancelAnimationFrame","NextBlock","HoldBlock","ScoreBoard","onClick","e","HighScore","Controls","document","addEventListener","handleKeyDown","removeEventListener","defaultPrevented","includes","key","preventDefault","disabled","src","process","alt","MessagePopup","message","details","isHidden","Info","store","createStore","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"mNAAaA,EAAe,QACfC,EAAe,SACfC,EAAe,YACfC,EAAe,aACfC,EAAe,SACfC,EAAe,cACfC,EAAe,YACfC,EAAe,YACfC,EAAe,UACfC,EAAe,aAGfC,EAAY,WACvB,MAAO,CAAEC,KAAMR,IAGJS,EAAW,WACtB,MAAO,CAAED,KAAMT,IAGJW,EAAS,WACpB,MAAO,CAAEF,KAAMP,IAOJU,EAAW,WACtB,MAAO,CAAEH,KAAML,IAWJS,EAAQ,WACnB,MAAO,CAAEJ,KAAMX,IAGJgB,EAAS,WACpB,MAAO,CAAEL,KAAMV,IAGJgB,EAAU,WACrB,MAAO,CAAEN,KAAMH,I,OC7CJU,EAAc,WAKzB,IAJA,IAEMC,EAAQ,GAELC,EAAM,EAAGA,EAJL,GAIiBA,IAAO,CACjCD,EAAME,KAAK,IACX,IAAK,IAAIC,EAAM,EAAGA,EALT,GAKqBA,IAC5BH,EAAMC,GAAKC,KAAK,GAItB,OAAOF,GAGII,EAAc,CACzBC,KAAM,CAAC,YAAa,OAAQ,KAC5BC,MAAO,CAAC,aAAc,QAAS,KAC/BC,KAAM,CAAC,YAAa,OAAQ,KAC5Bb,OAAQ,CAAC,UAAW,KAAM,IAAK,KAC/Bc,WAAY,CAAC,IAAK,KAClBC,UAAW,CAAC,IAAK,KACjBC,KAAM,CAAC,KACPd,MAAO,CAAC,SAAU,SAClBC,OAAQ,CAAC,SAAU,SACnBC,QAAS,CAAC,IAAK,UAGJa,EAAS,CAEpB,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE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","file":"static/js/main.d20ef575.chunk.js","sourcesContent":["export const PAUSE        = \"PAUSE\"       // Pause the game\nexport const RESUME       = \"RESUME\"      // Resume a paused game\nexport const MOVE_LEFT    = \"MOVE_LEFT\"   // Move piece left\nexport const MOVE_RIGHT   = \"MOVE_RIGHT\"  // Move piece right\nexport const ROTATE       = \"ROTATE\"      // Rotate piece\nexport const ROTATE_PREV  = \"ROTATE_PREV\" // Rotate piece\nexport const MOVE_DOWN    = \"MOVE_DOWN\"   // Move piece down\nexport const GAME_OVER    = \"GAME_OVER\"   // The game is over\nexport const RESTART      = \"RESTART\"     // Restart Game\nexport const HOLD_SHAPE   = \"HOLD_SHAPE\"  // Hold Shape\nexport const DROP         = \"DROP\"        // Drop\n\nexport const moveRight = () => {\n  return { type: MOVE_RIGHT }\n}\n\nexport const moveLeft = () => {\n  return { type: MOVE_LEFT }\n}\n\nexport const rotate = () => {\n  return { type: ROTATE }\n}\n\nexport const rotatePrev = () => {\n  return { type: ROTATE_PREV }\n}\n\nexport const moveDown = () => {\n  return { type: MOVE_DOWN }\n}\n\nexport const holdShape = () => {\n  return { type: HOLD_SHAPE }\n}\n\nexport const drop = () => {\n  return { type: DROP }\n}\n\nexport const pause = () => {\n  return { type: PAUSE }\n}\n\nexport const resume = () => {\n  return { type: RESUME }\n}\n\nexport const restart = () => {\n  return { type: RESTART }\n}\n","export const random = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport const gridDefault = () => {\n  const rows = 18\n  const cols = 10\n  const array = []\n\n  for (let row = 0; row < rows; row++) {\n      array.push([])\n      for (let col = 0; col < cols; col++) {\n        array[row].push(0)\n      }\n  }\n\n  return array\n}\n\nexport const controlKeys = {\n  left: [\"ArrowLeft\", \"Left\", \"a\"],\n  right: [\"ArrowRight\", \"Right\", \"d\"],\n  down: [\"ArrowDown\", \"Down\", \"s\"],\n  rotate: [\"ArrowUp\", \"Up\", \"w\", \"x\"],\n  rotatePrev: [\"q\", \"z\"],\n  holdShape: [\"c\", \"e\"],\n  drop: [\" \"],\n  pause: [\"Escape\", \"Enter\"],\n  resume: [\"Escape\", \"Enter\"],\n  restart: [\" \", \"Enter\"],\n}\n\nexport const shapes = [\n  // none\n  [[[0,0,0,0],\n    [0,0,0,0],\n    [0,0,0,0],\n    [0,0,0,0]]],\n\n  // I\n  [[[0,0,0,0],\n    [1,1,1,1],\n    [0,0,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,0,0],\n    [0,1,0,0],\n    [0,1,0,0]]],\n\n  // T\n  [[[0,0,0,0],\n    [1,1,1,0],\n    [0,1,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [1,1,0,0],\n    [0,1,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [1,1,1,0],\n    [0,0,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,1,0],\n    [0,1,0,0],\n    [0,0,0,0]]],\n\n  // L\n  [[[0,0,0,0],\n    [1,1,1,0],\n    [1,0,0,0],\n    [0,0,0,0]],\n\n   [[1,1,0,0],\n    [0,1,0,0],\n    [0,1,0,0],\n    [0,0,0,0]],\n\n   [[0,0,1,0],\n    [1,1,1,0],\n    [0,0,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,0,0],\n    [0,1,1,0],\n    [0,0,0,0]]],\n\n  // J\n  [[[1,0,0,0],\n    [1,1,1,0],\n    [0,0,0,0],\n    [0,0,0,0]],\n\n   [[0,1,1,0],\n    [0,1,0,0],\n    [0,1,0,0],\n    [0,0,0,0]],\n\n   [[0,0,0,0],\n    [1,1,1,0],\n    [0,0,1,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,0,0],\n    [1,1,0,0],\n    [0,0,0,0]]],\n\n  // Z\n  [[[0,0,0,0],\n    [1,1,0,0],\n    [0,1,1,0],\n    [0,0,0,0]],\n\n   [[0,0,1,0],\n    [0,1,1,0],\n    [0,1,0,0],\n    [0,0,0,0]]],\n\n  // S\n  [[[0,0,0,0],\n    [0,1,1,0],\n    [1,1,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,1,0],\n    [0,0,1,0],\n    [0,0,0,0]]],\n\n  // O\n  [[[0,1,1,0],\n    [0,1,1,0],\n    [0,0,0,0],\n    [0,0,0,0]]]\n]\n\nexport const randomShape = () => {\n  return random(1, shapes.length - 1)\n}\n\nexport const defaultValues = {\n  x: 4,\n  y: -4,\n  speed: 500,\n}\n\nexport const defaultState = () => {\n  return {\n    // Create an empty grid\n    grid: gridDefault(),\n    // Get a new random shape\n    shape: randomShape(),\n    // set rotation of the shape to 0\n    rotation: 0,\n    // center of the grid, above the top\n    x: defaultValues.x,\n    y: defaultValues.y,\n    // set the index of the next shape to a new random shape\n    nextShape: randomShape(),\n    // holding nothing\n    holdShape: 0,\n    canHoldShape: true,\n    // Tell the game that it's currently running\n    isRunning: true,\n    // Set the score to 0\n    score: 0,\n    // Set the default speed\n    speed: defaultValues.speed,\n    // Game isn't over yet\n    gameOver: false,\n    scoreSaved: false,\n    // Rows completed\n    lines: 0,\n    // level\n    level: 0,\n    highScore: getHighScore()\n  }\n}\n\nexport const nextRotation = (shape, rotation) => {\n  return (rotation + 1) % shapes[shape].length\n}\n\nexport const prevRotation = (shape, rotation) => {\n  if (rotation === 0) {\n    return shapes[shape].length - 1\n  }\n  return (rotation - 1) % shapes[shape].length\n}\n\nexport const canMoveTo = (shape, grid, x, y, rotation) => {\n  const currentShape = shapes[shape][rotation]\n\n  const gridWidth = grid[0].length - 1\n  const gridHeight = grid.length - 1\n\n  for (let row = 0; row < currentShape.length; row++) {\n    for (let col = 0; col < currentShape[row].length; col++) {\n      if (currentShape[row][col] !== 0) {\n        const proposedX = col + x\n        const proposedY = row + y\n        const possibleRow = grid[proposedY]\n        if (proposedX < 0 || proposedX > gridWidth || proposedY > gridHeight) {\n          return false\n        } else if (possibleRow !== undefined) {\n          if (possibleRow[proposedX] !== 0) {\n            return false\n          }\n        }\n      }\n    }\n  }\n  return true\n}\n\nexport const addBlockToGrid = (shape, grid, x, y, rotation) => {\n  let blockOffGrid = false\n  const block = shapes[shape][rotation]\n  const newGrid = [ ...grid ]\n  for (let row = 0; row < block.length; row++) {\n    for (let col = 0; col < block[row].length; col++) {\n      if (block[row][col]) {\n        const yIndex = row + y\n        if (yIndex < 0) {\n          blockOffGrid = true\n        } else {\n          newGrid[row + y][col + x] = shape\n        }\n      }\n    }\n  }\n  return { grid: newGrid, gameOver: blockOffGrid }\n}\n\nexport const checkRows = (grid) => {\n  const points = [0, 40, 100, 300, 1200]\n  let completedRows = 0\n  for (let row = 0; row < grid.length; row++) {\n    if (grid[row].indexOf(0) === -1) {\n      completedRows += 1\n      grid.splice(row, 1)\n      grid.unshift(Array(10).fill(0))\n    }\n  }\n  return {points: points[completedRows], lines: completedRows}\n}\n\nexport const moveBlockDown = (state, moveInc = 1) => {\n  const { shape, grid, x, y, rotation, nextShape, holdShape,\n    score, isRunning, lines, level, speed, scoreSaved, canHoldShape } = state\n  const maybeY = y + moveInc\n  if (canMoveTo(shape, grid, x, maybeY, rotation)) {\n    return { ...state, y: maybeY }\n  }\n  const obj = addBlockToGrid(shape, grid, x, y, rotation)\n  const newGrid = obj.grid\n  const gameOver = obj.gameOver\n\n  if (gameOver) {\n    const newState = { ...state }\n    newState.shape = 0\n    newState.grid = newGrid\n    if (!scoreSaved) {\n      saveHighScore(score)\n      return { ...state, gameOver: true, scoreSaved: true }\n    }\n    return { ...state, gameOver: true }\n  }\n\n  const newState = defaultState()\n  newState.grid = newGrid\n  newState.shape = nextShape\n  newState.holdShape = holdShape\n  newState.score = score\n  newState.isRunning = isRunning\n  newState.lines = lines\n  newState.level = level\n  newState.speed = speed\n\n  const newScore = checkRows(newGrid)\n  newState.score = score + (newScore.points * (level + 1))\n  newState.lines = lines + newScore.lines\n  newState.level = calculateLevel(newState.lines)\n  newState.speed = calculateSpeed(newState.level)\n\n  return newState\n}\n\nexport const calculateLevel = (linesCleared) => {\n  return Math.floor(linesCleared / 3)\n}\n\nexport const calculateSpeed = (level) => {\n  let speed = defaultValues.speed - (level * 100)\n  if (speed >= 100) {\n    return speed\n  }\n  return 50\n}\n\nconst HIGH_SCORE = \"HIGH_SCORE\"\n\nexport const getHighScore = () => {\n  try {\n  // Grab the state from local storage\n    const serializedState = localStorage.getItem(HIGH_SCORE)\n    if (serializedState === null) {\n      return 0\n    }\n    // convert the string into JSON for the Redux store\n    return JSON.parse(serializedState)\n  } catch(err) {\n    return 0\n  }\n}\n\nexport const saveHighScore = (score) => {\n  try {\n    let highScore = getHighScore()\n    if (!highScore) {\n      localStorage.setItem(\"HIGH_SCORE\", JSON.stringify(score))\n      return\n    }\n    if (highScore < score) {\n      localStorage.setItem(\"HIGH_SCORE\", JSON.stringify(score))\n    }\n\n  } catch(err) {\n    console.log(err)\n  }\n}\n","import {\n  MOVE_RIGHT, MOVE_LEFT, MOVE_DOWN, ROTATE, HOLD_SHAPE, DROP, ROTATE_PREV, PAUSE, RESUME, RESTART, GAME_OVER\n} from '../actions'\n\nimport {\n  defaultState,\n  nextRotation,\n  prevRotation,\n  canMoveTo,\n  addBlockToGrid,\n  checkRows,\n  calculateLevel,\n  calculateSpeed,\n  saveHighScore,\n  defaultValues,\n  moveBlockDown,\n  randomShape\n} from '../utils'\n\nconst gameReducer = (state = defaultState(), action) => {\n  const { shape, grid, x, y, rotation, nextShape, holdShape,\n    score, isRunning, lines, level, speed, scoreSaved, canHoldShape } = state\n  switch(action.type) {\n      case ROTATE:\n        const newCwRotation = nextRotation(shape, rotation)\n        if (canMoveTo(shape, grid, x, y, newCwRotation)) {\n            return { ...state, rotation: newCwRotation }\n        }\n        return state\n\n      case ROTATE_PREV:\n        const newCcwRotation = prevRotation(shape, rotation)\n        if (canMoveTo(shape, grid, x, y, newCcwRotation)) {\n            return { ...state, rotation: newCcwRotation }\n        }\n        return state\n\n      case MOVE_RIGHT:\n        if (canMoveTo(shape, grid, x + 1, y, rotation)) {\n          return { ...state, x: x + 1 }\n        }\n        return state\n\n      case MOVE_LEFT:\n        if (canMoveTo(shape, grid, x - 1, y, rotation)) {\n          return { ...state, x: x - 1 }\n        }\n        return state\n\n      case MOVE_DOWN:\n        return moveBlockDown(state)\n\n      case RESUME:\n        return { ...state, isRunning: true }\n\n      case PAUSE:\n        return { ...state, isRunning: false }\n\n      case GAME_OVER:\n        return state\n\n      case RESTART:\n        return defaultState()\n\n      case HOLD_SHAPE:\n        if (!canHoldShape) return state\n        let newShape = holdShape\n        let newNextShape = nextShape\n        if (holdShape === 0) {\n          newShape = nextShape\n          newNextShape = randomShape()\n        }\n        return { ...state,\n          shape: newShape,\n          holdShape: shape,\n          nextShape: newNextShape,\n          canHoldShape: false,\n          x: defaultValues.x,\n          y: defaultValues.y,\n        }\n\n      case DROP:\n        // TODO: make this work????\n        // let maybeY = y\n        // let newState = state\n        //\n        // while (canMoveTo(shape, grid, x, maybeY + 1, rotation)) {\n        //   newState = moveBlockDown(state, maybeY)\n        // }\n        //\n        // return newState\n\n      default:\n        return state\n    }\n}\n\nexport default gameReducer\n","import { combineReducers } from 'redux'\nimport gameReducer from './game-reducer'\n\n// The state handled by `gameReducer` will be stored with the property name `game` on the Redux store.\nconst reducers = combineReducers({\n  game: gameReducer\n})\n\nexport default reducers\n","import React from 'react'\n\n// Represents a grid square with a color\nexport default function GridSquare(props) {\n  const classes = `grid-square color-${props.color}`\n  return <div className={classes} />\n}\n","import React, { useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { moveDown } from '../actions'\nimport { shapes } from '../utils'\n\nimport GridSquare from './GridSquare'\n\n\nexport default function GridBoard(props) {\n  const requestRef = useRef()\n  const lastUpdateTimeRef = useRef(0)\n  const progressTimeRef = useRef(0)\n  const dispatch = useDispatch()\n  const game = useSelector((state) => state.game)\n  const { grid, shape, rotation, x, y, isRunning, speed } = game\n\n  const block = shapes[shape][rotation]\n  const blockColor = shape\n\n  const gridSquares = grid.map((rowArray, row) => {\n    return rowArray.map((square, col) => {\n\n      const blockX = col - x\n      const blockY = row - y\n      let color = square\n\n      if (blockX >= 0 && blockX < block.length && blockY >= 0 && blockY < block.length) {\n        color = block[blockY][blockX] === 0 ? color : blockColor\n      }\n\n      const k = row * grid[0].length + col;\n      return <GridSquare key={k} color={color} />\n    })\n  })\n\n  const update = (time) => {\n    requestRef.current = requestAnimationFrame(update)\n    if (!isRunning) {\n      return\n    }\n    if (!lastUpdateTimeRef.current) {\n      lastUpdateTimeRef.current = time\n    }\n    const deltaTime = time - lastUpdateTimeRef.current\n    progressTimeRef.current += deltaTime\n    if (progressTimeRef.current > speed) {\n      dispatch(moveDown())\n      progressTimeRef.current = 0\n    }\n    lastUpdateTimeRef.current = time\n  }\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(update)\n    return () => cancelAnimationFrame(requestRef.current)\n  }, [isRunning])\n\n  return (\n    <div className='grid-board'>\n      { gridSquares }\n    </div>\n  )\n}\n","import React from 'react'\nimport GridSquare from './GridSquare'\n\nimport { useSelector } from 'react-redux'\nimport { shapes } from '../utils'\n\n// Draws the \"next\" block view showing the next block to drop\nexport default function NextBlock(props) {\n  const nextShape = useSelector( (state) => state.game.nextShape )\n  const box = shapes[nextShape][0]\n\n  // Map the block to the grid\n  const grid = box.map( (rowArray, row) => {\n    return rowArray.map( (square, col) => {\n      return <GridSquare key={`${row}${col}`} color={square === 0 ? 0 : nextShape} />\n    })\n  })\n\n  return (\n    <div>\n      <div className=\"next-title\">Next:</div>\n      <div className=\"next-block\">\n        { grid }\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport GridSquare from './GridSquare'\n\nimport { useSelector } from 'react-redux'\nimport { shapes } from '../utils'\n\n\nexport default function HoldBlock(props) {\n  const holdShape = useSelector( (state) => state.game.holdShape )\n  const box = shapes[holdShape][0]\n\n  // Map the block to the grid\n  const grid = box.map( (rowArray, row) => {\n    return rowArray.map( (square, col) => {\n      return <GridSquare key={`${row}${col}`} color={square === 0 ? 0 : holdShape} />\n    })\n  })\n\n  return (\n    <div>\n      <div className=\"hold-title\">Hold:</div>\n      <div className=\"hold-block\">\n        { grid }\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { pause, resume, restart } from '../actions'\n\nexport default function ScoreBoard(props) {\n  const dispatch = useDispatch()\n  const game = useSelector((state) => state.game)\n  const { score, isRunning, gameOver, lines, level } = game\n\n  return (\n    <div className=\"score-board\">\n      <div>Level: { level }</div>\n      <div>Lines: { lines }</div>\n      <div>Score: { score }</div>\n      <button className=\"score-board-button\" onClick={(e) => {\n        if (gameOver) { return }\n        if (isRunning) {\n          dispatch(pause())\n        } else {\n          dispatch(resume())\n        }\n      }}>{isRunning ? 'Pause' : 'Play'}</button>\n      <button className=\"score-board-button\" onClick={(e) => {\n        dispatch(restart())\n      }}>Restart</button>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nexport default function HighScore(props) {\n  const dispatch = useDispatch()\n  const game = useSelector((state) => state.game)\n  const { score, highScore } = game\n\n  return (\n    <div className=\"high-score\">\n      High Score: { Math.max(score, highScore) }\n    </div>\n  )\n}\n","import React, { useEffect } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { moveDown, moveLeft, moveRight, rotate, rotatePrev,\n  pause, resume, restart, drop, holdShape } from '../actions'\nimport { controlKeys } from '../utils'\nimport HighScore from './HighScore'\n\nexport default function Controls(props) {\n  const dispatch = useDispatch()\n  const isRunning = useSelector((state) => state.game.isRunning)\n  const gameOver = useSelector((state) => state.game.gameOver)\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n    return function cleanup() {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n\n  const handleKeyDown = (e) => {\n    if (e.defaultPrevented) return\n\n    // Resume a paused game\n    if (!isRunning) {\n      if (controlKeys.resume.includes(e.key)) {\n        dispatch(resume())\n        e.preventDefault();\n      }\n      return\n    }\n\n    // Restart after game has ended\n    if (gameOver) {\n      if (controlKeys.restart.includes(e.key)) {\n        dispatch(restart())\n        e.preventDefault();\n      }\n      return\n    }\n\n    // Pause game\n    if (controlKeys.pause.includes(e.key)) {\n      dispatch(pause())\n      e.preventDefault();\n      return\n    }\n\n    // TODO: enable this when drop() works\n    // if (controlKeys.drop.includes(e.key)) dispatch(drop())\n\n    // Move down\n    if (controlKeys.down.includes(e.key)) {\n      dispatch(moveDown())\n      e.preventDefault();\n    }\n\n    // Move left/right\n    if (controlKeys.left.includes(e.key)) {\n      dispatch(moveLeft())\n      e.preventDefault();\n    }\n    else if (controlKeys.right.includes(e.key)) {\n      dispatch(moveRight())\n      e.preventDefault();\n    }\n\n    // rotate forwards/backwards\n    if (controlKeys.rotate.includes(e.key)) {\n      dispatch(rotate())\n      e.preventDefault();\n    }\n    else if (controlKeys.rotatePrev.includes(e.key)) {\n      dispatch(rotatePrev())\n      e.preventDefault();\n    }\n\n    // Hold shape\n    if (controlKeys.holdShape.includes(e.key)) {\n      dispatch(holdShape())\n      e.preventDefault();\n    }\n  }\n\n  return (\n\n    <div className=\"controls-wrapper\">\n      <div className=\"controls\">\n        <button\n          className=\"control-button\"\n          disabled={ !isRunning || gameOver }\n          onClick={ (e) => {\n            if (!isRunning || gameOver) { return }\n            dispatch(moveLeft())\n          }}><img\n            className=\"control-icon\"\n            src={`${process.env.PUBLIC_URL}/icons/arrow-left.svg`}\n            alt=\"Left\"/>\n        </button>\n\n        <button\n          className=\"control-button\"\n          disabled={ !isRunning || gameOver }\n          onClick={ (e) => {\n            if (!isRunning || gameOver) { return }\n            dispatch(moveRight())\n        }}><img\n          className=\"control-icon\"\n          src={`${process.env.PUBLIC_URL}/icons/arrow-right.svg`}\n          alt=\"Right\"/>\n      </button>\n\n        <button\n          className=\"control-button\"\n          disabled={ !isRunning || gameOver }\n          onClick={ (e) => {\n            if (!isRunning || gameOver) { return }\n            dispatch(rotate())\n        }}><img\n          className=\"control-icon\"\n          src={`${process.env.PUBLIC_URL}/icons/arrow-rotate.svg`}\n          alt=\"Rotate\"/>\n      </button>\n\n        <button\n          className=\"control-button\"\n          disabled={ !isRunning || gameOver }\n          onClick={ (e) => {\n            if (!isRunning || gameOver) { return }\n            dispatch(moveDown())\n        }}><img\n          className=\"control-icon\"\n          src={`${process.env.PUBLIC_URL}/icons/arrow-down.svg`}\n          alt=\"Down\"/>\n      </button>\n      </div>\n    <HighScore />\n\n    </div>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport default function MessagePopup(props) {\n  const isRunning = useSelector((state) => state.game.isRunning)\n  const gameOver = useSelector((state) => state.game.gameOver)\n\n  let message = ''\n  let details = ''\n  let isHidden = 'hidden'\n\n  if (gameOver) {\n    message = 'Game Over'\n    details = 'Press Space or Enter to restart!'\n    isHidden = ''\n  } else if (!isRunning) {\n    message = 'Paused'\n    isHidden = ''\n  }\n\n  return (\n    <div className={`message-popup ${ isHidden }`}>\n      <h1>{ message }</h1>\n      <div>{ details }</div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Info() {\n  return (\n    <div className=\"info\">\n      <table className=\"help-table table table-light\">\n        <thead>\n          <tr>\n            <th>Action</th>\n            <th>Key(s)</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Move Left</td>\n            <td>Left Arrow, A</td>\n          </tr>\n          <tr>\n            <td>Move Right</td>\n            <td>Right Arrow, D</td>\n          </tr>\n          <tr>\n            <td>Move Down</td>\n            <td>Down Arrow, S</td>\n          </tr>\n          <tr>\n            <td>Hold Piece</td>\n            <td>C, E</td>\n          </tr>\n          <tr>\n            <td>Rotate Right</td>\n            <td>Up Arrow, W, X</td>\n          </tr>\n          <tr>\n            <td>Rotate Left</td>\n            <td>Q, Z</td>\n          </tr>\n          <tr>\n            <td>Pause / Unpause</td>\n            <td>Escape, Enter</td>\n          </tr>\n          <tr>\n            <td>Restart After Game Over</td>\n            <td>Space, Enter</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n","import React from 'react';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducers from './reducers'\n\nimport './App.css';\n\nimport GridBoard from './components/GridBoard'\nimport NextBlock from './components/NextBlock'\nimport HoldBlock from './components/HoldBlock'\nimport ScoreBoard from './components/ScoreBoard'\nimport Controls from './components/Controls'\nimport MessagePopup from './components/MessagePopup'\nimport Info from './components/Info'\n\nconst store = createStore(reducers)\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <GridBoard />\n        <div className='block-info'>\n          <NextBlock />\n          <HoldBlock />\n        </div>\n        <ScoreBoard />\n        <Controls />\n        <MessagePopup />\n      </div>\n      <Info />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}